name: CI

on: [push, pull_request]

jobs:
  Coverage:
    # look at https://github.com/eddyxu/cpp-coveralls
    runs-on: ubuntu-latest
    env:
      COVERALLS_GIT_BRANCH: "${{ github.ref }}"
      COVERALLS_REPO_TOKEN: "${{ secrets.COVERALLS_TOKEN }}"
      WITH_LUA_ENGINE: LuaJIT
      LUA: luajit2.1
      LUAROCKS: 3.8.0
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: cpp-coveralls
      run: pip install cpp-coveralls PyYAML
    - name: depends
      run: sudo apt update && sudo apt install -y libssl-dev libuv1-dev
    - name: run
      run: |
        .github/shell/setup_lua.sh
        export PATH=$HOME/.usr/bin:$PATH
        $HOME/.usr/bin/luarocks install luv
        ln -s $HOME/.usr/lib/lua/5.1/luv.so
        export PKG_CONFIG_PATH=$HOME/.usr/lib/pkgconfig
        make coveralls
        coveralls -b . -i src --gcov-options '\-lp'

  Valgrind:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: depends
      run: sudo apt update && sudo apt install -y libssl-dev luajit libluajit-5.1-dev valgrind
    - name: run
      run: make valgrind

  Asan:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: depends
      run: brew install luajit --HEAD
    - name: run
      env:
        PKG_CONFIG_PATH: /usr/local/opt/openssl/lib/pkgconfig
        LSAN_OPTIONS: suppressions=../.github/asan.supp
        ASAN_OPTIONS: detect_leaks=1:check_initialization_order=1
        UBSAN_OPTIONS: print_stacktrace=1
        CC: clang
        LD: clang
      run: export PATH=/usr/local/opt/llvm/bin:$PATH && make asan

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        luarocks_version: [3.8.0]
        lua_version: [luajit2.1, lua5.1, lua5.2, lua5.3, lua5.4]
        openssl_version: [openssl-1.0.2u, openssl-1.1.1m, openssl-3.0.1]
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.12
      LUAROCKS: ${{ matrix.luarocks_version }}
      LUA: ${{ matrix.lua_version }}
      SSL: ${{ matrix.openssl_version }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Setup
      run:
        .github/shell/setup_lua.sh && .github/shell/setup_ssl.sh

    - name: Build
      run:
        .github/shell/build.sh

    - name: Test
      run:
        PKG_CONFIG_PATH=$HOME/.usr/lib64/pkgconfig:$HOME/.usr/lib/pkgconfig PATH=$HOME/.usr/bin:$PATH LD_LIBRARY_PATH=$HOME/.usr/lib64:$HOME/.usr/lib make test

  libressl:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        luarocks_version: [3.8.0]
        lua_version: [lua5.4]
        openssl_version: [libressl-3.2.7, libressl-3.3.5, libressl-3.4.2]
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.12
      LUAROCKS: ${{ matrix.luarocks_version }}
      LUA: ${{ matrix.lua_version }}
      SSL: ${{ matrix.openssl_version }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Setup
      run:
        .github/shell/setup_lua.sh && .github/shell/setup_ssl.sh

    - name: Build
      run:
        .github/shell/build.sh

    - name: Test
      run:
        PKG_CONFIG_PATH=$HOME/.usr/lib64/pkgconfig:$HOME/.usr/lib/pkgconfig PATH=$HOME/.usr/bin:$PATH LD_LIBRARY_PATH=$HOME/.usr/lib64:$HOME/.usr/lib make test

  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [Coverage, Valgrind, Asan, build]
    runs-on: ubuntu-latest
    env:
      WITH_LUA_ENGINE: LuaJIT
      LUA: luajit2.1
      LUAROCKS: 3.8.0
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Get version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

    - name: Setup
      run:
        .github/shell/setup_lua.sh

    - name: Package
      run:
        .github/shell/make_rockspec.sh ${{ steps.get_version.outputs.VERSION }}

    - name: Github Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        files: openssl-${{ steps.get_version.outputs.VERSION }}.tar.gz
        draft: false
        prerelease: false

    - name: Luarocks Release
      # lua-cjson is required for luarocks upload
      run: |
        $HOME/.usr/bin/luarocks install lua-cjson
        $HOME/.usr/bin/luarocks build
        $HOME/.usr/bin/luarocks test
        $HOME/.usr/bin/luarocks upload openssl-${{ steps.get_version.outputs.VERSION }}.rockspec --api-key=${{ secrets.LUAROCKS_TOKEN }}
